[
    {
        "itemNum": 1,
        "links": [
            {
                "reading": "Goodrich2011, pp.2-65",
                "subsection": "1.1",
                "task": [
                    "Create a simple HelloWorld program",
                    "Build a project using Visual Studio",
                    "Build a project from a command-line using a Makefile",
                    "Test CLI programs using plaintext files for input and expected output",
                    "Create a HelloWorld program with OO-style classes and includes",
                    "Convert between some fundamental types and strings",
                    "Tag submittable files for grading and check your submission. "
                ],
                "title": "Create simple programs in C++",
                "video": [
                    "https://youtu.be/ajRj_LmDmjk"
                ]
            },
            {
                "reading": "",
                "subsection": "1.2",
                "task": [
                    "Understand binary representation of integers and floats",
                    "List all number-related types in C++",
                    "Understand character and string related types and encodings",
                    "Variable declarations and definitions; variable scope",
                    "Use namespaces explicitly or implicitly",
                    "Use literal values in variable initializations",
                    "Define variables, their pointers and references",
                    "Declare, define and initialize arrays of fundamental types",
                    "Declare enum datatypes",
                    "Declare struct datatypes"
                ],
                "title": "Write small programs with various statements, variables, expressions and control structures",
                "video": [
                    "NA"
                ]
            }
        ],
        "title": "2020-09-07 to 2020-09-11"
    },
    {
        "itemNum": 2,
        "links": [
            {
                "reading": "Goodrich2011, pp.2-65",
                "subsection": "1.3",
                "task": [
                    "Use control structures",
                    "Create multiple classes and their header files; use source organization and naming conventions",
                    "Understand the process of compilation and linking.",
                    "Define and call functions passing parameters by value",
                    "Define and call functions passing parameters by reference",
                    "Use function pointers.",
                    "Find errors in projects using code inspection, testing, debugging and printouts."
                ],
                "title": "Write large structured programs in C++ (no focus on OO so far)",
                "video": [
                    "NA"
                ]
            },
            {
                "reading": "Goodrich2011, pp.2-65",
                "subsection": "1.4",
                "task": [
                    "Explain abstraction as an OO principle",
                    "Explain encapsulation as an OO principle; keywords public/private and friends",
                    "Explain inheritance as an OO principle; inheriting class contract",
                    "Explain polymorophism as an OO principle; keywords virtual/abstract",
                    "Define class hierarhies following the OO principles",
                    "Define template functions and template classes. ",
                    "Define overloaded operators and understand their risks"
                ],
                "title": "namespaces,, C++ templates, operator overloading",
                "video": [
                    "NA"
                ]
            }
        ],
        "title": "2020-09-14 to 2020-09-18"
    },
    {
        "itemNum": 3,
        "links": [
            {
                "reading": "Goodrich2011, pp.673-678 (14.2  External Memory and Caching)",
                "subsection": "1.5",
                "task": [
                    "Use the automatic variables and heap variables",
                    "Understand the implications of memory allocation and deallocation",
                    "Use proper garbage collection practices and detect memory leaks",
                    "Use caching for speedup",
                    "Understand memory hierarchy"
                ],
                "title": "Understand the C++ memory model",
                "video": [
                    "NA"
                ]
            },
            {
                "reading": "NA",
                "subsection": "2.1",
                "task": [
                    "Identify the key characteristics of an algorithm",
                    "Define the time complexity of an algorithm; make assumptions about the data structure manipulations",
                    "Define the space complexity of an algorithm",
                    "Describe the difference between feasible and infeasible algorithms"
                ],
                "title": "Analyze algorithms in terms of high-level implementation and complexity",
                "video": [
                    "NA"
                ]
            }
        ],
        "title": "2020-09-21 to 2020-09-25"
    },
    {
        "itemNum": 4,
        "links": [
            {
                "reading": "NA",
                "subsection": "2.2",
                "task": [
                    "Define stack as an ADT",
                    "Define a deque as an ADT",
                    "Define a list as an ADT",
                    "Define a binary tree as an ADT",
                    "Define a map as an ADT",
                    "Implement data structures in arrays",
                    "Implement data structures as pointer structures"
                ],
                "title": "Define data structures as Abstract Data Types (More ADTs will be defined in subsequent modules)",
                "video": [
                    "NA"
                ]
            },
            {
                "reading": "https://bit.ly/2NBvNXh",
                "subsection": "2.3",
                "task": [
                    "Indentify the main container classes typically implemented by data structure libraries",
                    "Identify the key manipulations (initialize, sort, search, transform) on containers",
                    "Identify the iterators and ways to visit each element in a container for custom processing",
                    "Understand representation invariants (rep invariants)",
                    "Understand the representational exposure",
                    "Use defensive copying, proper get/set methods, verbal contract with client classes to avoid exposure",
                    "Use STL to initialize vectors, stacks and maps",
                    "Use C++ constructs to iterate over data structures"
                ],
                "title": "Understand containers and use STL to implement vectors, stacks, maps",
                "video": [
                    "NA"
                ]
            }
        ],
        "title": "2020-09-28 to 2020-10-02"
    }
]