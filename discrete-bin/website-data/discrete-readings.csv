"ID","Sub","Key ","Value"
1,0,"title","Algorithms: Large Primes"
1,0,"name","TBA"
1,0,"description","It would be highly inefficient to search for prime numbers with a full search algorithm such as the Sieve of Eratosthenes or testing divisibility up to the square root. Nevertheless, large primes are important for cryptography and other applications. There are several efficient algorithms for primality testing."
1,1,"url","https://bit.ly/2tx7Iub"
1,1,"link","The Sieve of Eratosthenes"
1,1,"note","An ancient algorithm to build a list of primes in a large interval."
1,2,"url","https://bit.ly/2uhos8L"
1,2,"link","Miller-Rabin primality test"
1,2,"note","Most practical and widely used algorithm is probabilistic. It may falsely claim that a composite number is prime with a small probability. The error can be made as small as you want, if you run sufficiently many tests."
1,3,"url","https://www.mersenne.org/"
1,3,"link","Great Internet Mersenne Prime Search (GIMPS) project"
1,3,"note","The largest known primes have special form – they are named Mersenne Primes. They have even more efficient algorithms to check their primality (much faster than Miller-Rabin or Agrawal-Kayal-Saxena). Since 1996 there is an international activity to search for new Mersenne Primes - using computing power all around the world. This distributed computing effort served as a prototype for Bitcoin mining two decades later. "
1,4,"url","https://bit.ly/2R44ZBB"
1,4,"link","Agrawal-Kayal-Saxena primality test"
1,4,"note","For several decades there was no known deterministic efficient (polynomial time) algorithm to find primes. Miller-Rabin test did not count (since it is probabilistic). In 2002 the first algorithm to find primes efficiently was found."
2,0,"title","Algorithms: Secure Hashing"
2,0,"name","K.L."
2,0,"description","Hash algorithms (one-way functions that map large domain of inputs to a smaller range of values) may include checksums, CRC and other simple computations that could ensure, for example, that there have been no errrors when transmitting files. On the other hand, Secure Hash Algorithms should ensure that nobody can infer any meaningful information from the hashed value, and most importantly – it should be prohibitively expensive to build “collisions” (find any two arguments that map to the same value). They are used to store user passwords and other information (that we need to check against, but do not want to store in cleartext). Historically MD5 algorithm has been widely used, but it turned out to be insecure (collisions are relatively easy to find). Therefore there have been SHA1, SHA2 (including various lengths of the hash values – SHA-256 is a member of SHA2 family), SHA3 and some others."
2,1,"url","https://en.wikipedia.org/wiki/Cryptographic_hash_function"
2,1,"link","Cryptographic Hash Functions"
2,1,"note","Overall description of the problem."
2,2,"url","https://blog.jscrambler.com/hashing-algorithms/"
2,2,"link","Comparison of hashing algorithms"
2,2,"note","Explanation why nobody should use MD5 for security purposes."
2,3,"url","https://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript"
2,3,"link","How to generate hash in JavaScript"
2,3,"note","Transmitting clear-text passwords when users log in is highly risky (even over HTTPS, as it can be intercepted).Therefore Web developers routinely encode sensitive information even on the client’s side."
3,0,"title","Algorithms: Arithmetic Coding"
3,0,"name","A.V."
3,0,"description","Unlike Lempel-Ziv or Burrows-Wheeler codes (optimal for human language where letter combinations and entire words often repeat), arithmetic coding relies on the probabilities of the messages. It aims to achieve the maximum compression rate possible due to Shannon’s enthropy theorem about the information content. Such codes are called “enthropy codes”. They include Huffman and Arithmetic coding. Arithmetic coding represents each sequence of messages as an interval of real numbers from the interval [0;1]. "
3,1,"url","https://en.wikipedia.org/wiki/Arithmetic_coding"
3,1,"link","Arithmetic coding (Wikipedia)"
3,1,"note","Different letters (also called “messages”) appear with different probabilities. Arithmetic coding uses the fact that it is more efficient to encode frequently occurring things with sending fewer bits. At every time moment the current message sequence is represented as a numeric interval. Whenever a new message arrives, the interval shrinks (if the new message is rare, it shrinks more). At every moment we can restore the sequence of the messages that generated our current interval."
3,2,"url","https://www.cs.cmu.edu/~guyb/realworld/compression.pdf"
3,2,"link","Introduction to Data Compression by G.Blelloch (pp.16-22)"
3,2,"note","How arithmetic coding fits into the larger picture of information compression; Shannon’s theorem on information content is proved. Also a discussion how to deal with the real number arithmetic on actual computers that enjoy integer numbers best."
3,3,"url","https://www.youtube.com/watch?v=cJ_rhZ9DP9k&feature=youtu.be&t=2070"
3,3,"link","Lecture 5 on Enthropy (David MacKay, Cambridge); start video at 34:30."
3,3,"note","How probabilistic models that generate messages behave with respect to arithmetic coding."
3,4,"url","https://pdfs.semanticscholar.org/aa4b/e5c61d003030b96e7d10340db32ea79c3d77.pdf"
3,4,"link","Arithmetic Coding - Theory and Practice by Amir Said (Hewlett-Packard Labs)"
3,4,"note","Theoretical introduction followed by lots and lots of implementation details. This shows how a simple idea (having neat proportions of real-number intervals) does not stay simple in real life."
3,5,"url","https://en.wikipedia.org/wiki/Asymmetric_numeral_systems"
3,5,"link","Asymmetric numeral systems"
3,5,"note","ANS were developed about 2014 by Jarosław (Jarek) Duda at University of Kraków. It can speed up compression that is very similar to arithmetic coding by a factor of 10 or more. Such algorithms have become the basis for compression standards used by ZStandard, Draco 3D and multiple contemporary operating systems."
