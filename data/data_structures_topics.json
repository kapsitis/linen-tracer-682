[
    {
        "itemNum": 1,
        "links": [
            {
                "id": "1.1",
                "reading": "CH01P01",
                "task": [
                    "Create a simple HelloWorld program",
                    "Build a project using Visual Studio",
                    "Build a project from a command-line using a Makefile",
                    "Test CLI programs using plaintext files for input and expected output",
                    "Create a HelloWorld program with OO-style classes and includes",
                    "Convert between some fundamental types and strings",
                    "Tag submittable files for grading and check your submission. "
                ],
                "title": "Create HelloWorld style programs",
                "video": [
                    "https://youtu.be/ajRj_LmDmjk"
                ]
            },
            {
                "id": "1.2",
                "reading": "CH01P01",
                "task": [
                    "Understand binary representation of integer and float types",
                    "List all number-related types in C++",
                    "Understand character and string related types and encodings",
                    "Declare, define and initialize variables, know their scope",
                    "Define variable pointers and references",
                    "Use namespaces explicitly or implicitly",
                    "Use literal values in variable initializations",
                    "Write conditional statements",
                    "Write switch statements, understand their performance implications",
                    "Write loop statements, understand pre-increment and postincrement loops, loop variable scope",
                    "Declare, define and initialize arrays of fundamental types",
                    "Declare enum datatypes",
                    "Declare struct datatypes"
                ],
                "title": "Use expressions, assignments and control structures in C++",
                "video": [
                    "NA"
                ]
            }
        ],
        "title": "2020-08-31 to 2020-09-04"
    },
    {
        "itemNum": 2,
        "links": [
            {
                "id": "1.3",
                "reading": "CH01P06",
                "task": [
                    "Write C++ header files",
                    "Understand the use of macro commands; use macros to do definition guards.",
                    "Understand the process of compilation and linking.",
                    "Define and call functions passing parameters by value",
                    "Define and call functions passing parameters by reference",
                    "Describe naming conventions and naming best practices in C++",
                    "Use plain recursion and tail recursion",
                    "Use mutual recursion",
                    "Use function pointers",
                    "Find errors in projects using code inspection, testing, debugging and printouts."
                ],
                "title": "Write multi-file programs in C++",
                "video": [
                    "NA"
                ]
            },
            {
                "id": "1.4",
                "reading": "CH02P01;CH02P02;CH02P03",
                "task": [
                    "Explain abstraction as an OO principle",
                    "Explain encapsulation as an OO principle; keywords public/private and friends",
                    "Explain inheritance as an OO principle; inheriting class contract",
                    "Explain polymorophism as an OO principle; keywords virtual/abstract",
                    "Define class hierarhies following the OO principles",
                    "Explain function overriding with inheritance",
                    "Explain abstract classes and virtual functions.",
                    "Define template functions and template classes. ",
                    "Define and use overloaded operators"
                ],
                "title": "Use Object Orientation concepts in C++",
                "video": [
                    "NA"
                ]
            }
        ],
        "title": "2020-09-07 to 2020-09-11"
    },
    {
        "itemNum": 3,
        "links": [
            {
                "id": "1.5",
                "reading": "CH14P01;CH14P02",
                "task": [
                    "Use the automatic variables and heap variables",
                    "Understand the implications of memory allocation and deallocation",
                    "Use proper garbage collection practices and detect memory leaks",
                    "Use caching for speedup",
                    "Understand memory hierarchy"
                ],
                "title": "Understand the C++ memory model",
                "video": [
                    "NA"
                ]
            },
            {
                "id": "2.1",
                "reading": "CH04P02",
                "task": [
                    "Identify the key characteristics of an algorithm",
                    "Determine function growth classes using O-notation, Ω-notation, Θ-notation.",
                    "Define the time complexity of an algorithm; make assumptions about the data structure manipulations",
                    "Define the space complexity of an algorithm",
                    "Describe the difference between feasible and infeasible algorithms",
                    "Worst-case, expected and amortized complexity"
                ],
                "title": "Analyze algorithms by counting data related operations",
                "video": [
                    "NA"
                ]
            }
        ],
        "title": "2020-09-14 to 2020-09-18"
    },
    {
        "itemNum": 4,
        "links": [
            {
                "id": "2.2",
                "reading": "CH06P01;CH06P02;CH06P03",
                "task": [
                    "Define stack as an ADT",
                    "Define a deque as an ADT",
                    "Define a list as an ADT",
                    "Define a sequence as an ADT",
                    "Define a binary tree as an ADT",
                    "Define a map as an ADT",
                    "Implement data structures in arrays",
                    "Implement data structures with pointers"
                ],
                "title": "Define and implement functions for simple Abstract Data Types (ADT)",
                "video": [
                    "NA"
                ]
            },
            {
                "id": "2.3",
                "reading": "CH01P05",
                "task": [
                    "Indentify the main container classes typically implemented by data structure libraries",
                    "Identify the key manipulations (initialize, sort, search, transform) on containers",
                    "Identify the iterators and ways to visit each element in a container for custom processing",
                    "Understand representation invariants (rep invariants)",
                    "Understand the representational exposure",
                    "Use defensive copying, proper get/set methods, verbal contract with client classes to avoid exposure",
                    "Use STL to initialize vectors, stacks and maps",
                    "Use C++ constructs to iterate over data structures"
                ],
                "title": "Use STL to implement containers - vectors, stacks and maps",
                "video": [
                    "NA"
                ]
            }
        ],
        "title": "2020-09-21 to 2020-09-25"
    },
    {
        "itemNum": 5,
        "links": [
            {
                "id": "2.4",
                "reading": "CH02P01; CH05P03; CH07P03; CH09P01; CH11P04; CH13P03",
                "task": [
                    "Describe the tradeoffs between top-down and bottom-up design",
                    "Define the singleton OO design pattern",
                    "Define the factory OO design pattern",
                    "Define the adapter OO design patern",
                    "Define the decorator OO design patern",
                    "Define the command OO design pattern",
                    "Define the composite OO design pattern",
                    "Define the memento OO design pattern",
                    "Define the iterator OO design pattern",
                    "Define the observer OO design pattern",
                    "Define the template method OO design pattern"
                ],
                "title": "Define OO design patterns in C++",
                "video": [
                    "NA"
                ]
            },
            {
                "id": "2.5",
                "reading": "CH01P07;CH04P03",
                "task": [
                    "Identify the reasons why software can contain errors",
                    "Write reasonably complete set of testcases. ",
                    "Enforce invariants and Hoare logic to your data structure manipulations",
                    "Use printouts and/or efficient logging",
                    "Analyze runtime behavior using breakpoints."
                ],
                "title": "Test and debug algorithms in C++",
                "video": [
                    "NA"
                ]
            }
        ],
        "title": "2020-09-28 to 2020-10-02"
    },
    {
        "itemNum": 6,
        "links": [
            {
                "id": "3.1",
                "reading": "CH03P01;CH03P02;CH03P03;CH05P01;CH05P02;CH05P03;CH06P01;CH06P02;CH06P03",
                "task": [
                    "Define list and vector ADTs",
                    "Define an interator ADT",
                    "Implement list as a singly linked list",
                    "Implement list as a doubly linked list",
                    "Implement vector as an extendable array",
                    "Implement vector as an extendable cicular array"
                ],
                "title": "Construct and manipulate list-like data structures",
                "video": [
                    "NA"
                ]
            },
            {
                "id": "3.2",
                "reading": "CH07P01;CH07P02",
                "task": [
                    "Define graph-theoretic concepts: root, internal nodes, leaves, children, parent, siblings.",
                    "Define path-related concepts in trees",
                    "Define full, complete and perfect n-ary trees.",
                    "Define tree ADT",
                    "Parse algebraic expressions and convert them to trees",
                    "Evaluate algebraic expression trees using stack data structure",
                    "Implement trees with two-way pointers",
                    "Implement (preferably, complete) trees with arrays",
                    "Representing a rooted n-ary tree as a binary tree."
                ],
                "title": "Construct and traverse tree-like data structures",
                "video": [
                    "NA"
                ]
            }
        ],
        "title": "2020-10-05 to 2020-10-09"
    },
    {
        "itemNum": 7,
        "links": [
            {
                "id": "3.3",
                "reading": "CH08P01;CH08P02;CH08P03",
                "task": [
                    "Priority queue ADT",
                    "Analyze priority queue implementation as a regular binomial heap",
                    "Analyze skew binomial heap implementation",
                    "Analyze leftist binomial heap implementation",
                    "Analyze Huffman algorithm to compress a sequence of independent messages"
                ],
                "title": "Construct and manipulate priority queues and heaps",
                "video": [
                    "NA"
                ]
            },
            {
                "id": "3.4",
                "reading": "CH09P01;CH09P02;CH09P03;CH09P04",
                "task": [
                    "Define map ADT",
                    "Define a hashtable and a corresponding hash function",
                    "Describe a hash collision and hash tables with chaining",
                    "Growing and shrinking hash tables",
                    "Analyze worst-case and amortized operation complexity in hashtables",
                    "Define a rolling hash ADT (append, skip)",
                    "Analyze Rabin-Karp algorithm",
                    "Implement map as a doubly-linked list",
                    "Implement skiplists",
                    "Adjust data structures for dictionaries with repetitive keys"
                ],
                "title": "Construct and manipulate maps and dictionaries",
                "video": [
                    "NA"
                ]
            }
        ],
        "title": "2020-10-12 to 2020-10-16"
    },
    {
        "itemNum": 8,
        "links": [
            {
                "id": "3.5",
                "reading": "CH01P01",
                "task": [
                    "Define BST operations as ADT.",
                    "Run node search, insert and delete in an abstract BST",
                    "Implement node search, insert and delete in pointer implementation.",
                    "Implement node search, insert and delete in array implementation"
                ],
                "title": "Construct and manipulate BST structures",
                "video": [
                    "NA"
                ]
            },
            {
                "id": "3.6",
                "reading": "CH10P02;CH10P03;CH10P04;CH10P05",
                "task": [
                    "Implement tree balancing as AVL tree",
                    "Implement tree balancing as red-black tree",
                    "Implement balancing as splay tree",
                    "Introduce (a,b)-search-trees and (2,4)-trees in particular"
                ],
                "title": "Construct and manipulate balanced BSTs",
                "video": [
                    "NA"
                ]
            }
        ],
        "title": "2020-10-19 to 2020-10-23"
    },
    {
        "itemNum": 9,
        "links": [
            {
                "id": "3.7",
                "reading": "CH11P01;CH11P02;CH11P03",
                "task": [
                    "Analyze insertion sort and bubble sort",
                    "Analyze merge sort algorithm",
                    "Analyze quicksort algorithm",
                    "Analyze heapsort algorithm"
                ],
                "title": "Analyze and compare different sorting methods",
                "video": [
                    "NA"
                ]
            },
            {
                "id": "3.8",
                "reading": "CH11P04;CH11P05",
                "task": [
                    "Revisit generalized container ADTs that are used to represent (unordered) sets.",
                    "Introduce additional operations in ordered sets.",
                    "Revisit iterator ADTs in set-like data structures.",
                    "Analyze set-level operations (union, difference, etc.) in the list implementation.",
                    "Analyze set-level operations in the hashtable implementation",
                    "Analyze set-level operations in tree implementations.",
                    "Analyze some algorithms for the selection problem (identifying the n-th element)"
                ],
                "title": "Construct and manipulate set-like structures ",
                "video": [
                    "NA"
                ]
            }
        ],
        "title": "2020-10-26 to 2020-10-30"
    },
    {
        "itemNum": 10,
        "links": [
            {
                "id": "3.9",
                "reading": "CH13P01;CH13P02;CH13P03;CH13P04",
                "task": [
                    "Revisit graph concepts: undirected vs. directed, simple graphs vs. multigraphs, degrees, indegrees, outdegrees; their input via matrices and adjacency lists. ",
                    "Introduce graph ADTs, their iterators, accessor and update methods. ",
                    "Describe alternatives of graph input, output and storage.",
                    "Describe the BFS traversal algorithm template",
                    "Describe the DFS traversal algorithm flavors.",
                    "Use the DFS traversal to analyze mazes",
                    "Use the DFS traversal to find paths and cycles in a graph."
                ],
                "title": "Describe graph and directed graph structures and traversals",
                "video": [
                    "NA"
                ]
            },
            {
                "id": "3.10",
                "reading": "CH13P05;CH13P06",
                "task": [
                    "Introduce the weighted graph framework and input data",
                    "Analyze Dijkstra’s algorithm",
                    "Analyze Bellman-Ford algorithm (and negative edge weights)",
                    "Analyze Kruskal’s algorithm",
                    "Analyze Prim’s algorithm",
                    "Analyze Boruvka’s algorithm"
                ],
                "title": "Analyze Shortest Paths and MST algorithms",
                "video": [
                    "NA"
                ]
            }
        ],
        "title": "2020-11-02 to 2020-11-06"
    },
    {
        "itemNum": 11,
        "links": [
            {
                "id": "4.1",
                "reading": "CH12P03",
                "task": [
                    "Define exhaustive search paradigm",
                    "Describe tactics to generate combinations",
                    "Describe examples of “naive” search algorithms",
                    "Describe examples of “naive” string matching algorithms"
                ],
                "title": "Describe exhaustive, brute-force paradigms",
                "video": [
                    "NA"
                ]
            }
        ],
        "title": "2020-11-09 to 2020-11-13"
    },
    {
        "itemNum": 12,
        "links": [
            {
                "id": "4.2",
                "reading": "CH11P01",
                "task": [
                    "Describe divide and conquer paradigm",
                    "Revisit mergesort and quicksort",
                    "Revisit BSTs",
                    "Analyze recurrence equations, apply Master method",
                    "Run Karatsuba’s fast multiplication",
                    "Run Strassen’s fast matrix multiplication"
                ],
                "title": "Describe divide and conquer paradigm",
                "video": [
                    "NA"
                ]
            }
        ],
        "title": "2020-11-16 to 2020-11-20"
    },
    {
        "itemNum": 13,
        "links": [
            {
                "id": "4.3",
                "reading": "CH13P04",
                "task": [
                    "Describe decrease and conquer paradigm",
                    "Analyze topological sorting algorithm",
                    "Generate permutations or subsets of a given set",
                    "Discuss heap implementations in terms of decrease and conquer.",
                    "Describe transform and conquer paradigm",
                    "Run Gaussian elimination method",
                    "Run Horner’s rule and binary exponentiation (modulo something)"
                ],
                "title": "Describe other piecemeal paradigms for algorithms",
                "video": [
                    "NA"
                ]
            },
            {
                "id": "4.4",
                "reading": "CH14P03;CH14P04",
                "task": [
                    "Describe the tradeoff between time and space complexity",
                    "Introduce input-enhancing approaches; analyze sorting-by-counting algorithms",
                    "Apply time/space tradeoffs when choosing hashing function",
                    "Analyze Bloom filters; probabilistic dictionary implementations",
                    "Describe the tradeoff between probabilistic data structure accuracy and space",
                    "Introduce B-tree data structure and its use in databases"
                ],
                "title": "Describe time and space tradeoffs for different paradigms",
                "video": [
                    "NA"
                ]
            }
        ],
        "title": "2020-11-23 to 2020-11-27"
    },
    {
        "itemNum": 14,
        "links": [
            {
                "id": "4.5",
                "reading": "CH12P04",
                "task": [
                    "Describe dynamic programming paradigm",
                    "Describe greedy programming paradigm",
                    "Describe graph problems and other optimization tasks in terms of greedy paradigm",
                    "Describe iterative improvement paradigm"
                ],
                "title": "Describe iterative and memoization-based paradigms for algorithms",
                "video": [
                    "NA"
                ]
            },
            {
                "id": "4.6",
                "reading": "CH12P03",
                "task": [
                    "Describe searching and sorting problems",
                    "Describe string processing problems",
                    "Describe some examples of graph problems",
                    "Describe some examples of combinatorial problems",
                    "Describe some examples of geometric problems",
                    "Describe some examples of numerical problems"
                ],
                "title": "Describe classes of algorithmic problems and overview their algorithms",
                "video": [
                    "NA"
                ]
            }
        ],
        "title": "2020-11-30 to 2020-12-04"
    }
]